title: Behold: the QR card
---
pub_date: 2017-01-22
---
author: James Webber
---
published: true
---
body:

I'm inordinately pleased with this<sidenote>That's me, in case you can't tell</sidenote>.

<image height="200" src="/static/qrcard.png"/>

## How it works

It turns out that getting an arbitrary image into a QR code is annoyingly difficult. Or at least it took me quite a while to do it&mdash;partially due to inertia, as it required the concentrated boredom of a trip home for the holidays to get me focused enough to crack it. In the end, the code is fairly simple.

In short, I had to [reverse-engineer a QR code library](https://github.com/lincolnloop/python-qrcode), figure out where the data was stored, put in the data I wanted, and then calculate the corresponding error correction code so that the thing would scan properly.

## In more detail

The whole thing fits in a [GitHub Gist](https://gist.github.com/jamestwebber/b6dcafdfa35d5c4784fa3b4fc130b03c), if you don't include the required [python-qrcode](https://github.com/lincolnloop/python-qrcode) library. The workflow is fairly simple:

 1. Get the layout of the QR code<sidenote>This took the longest to figure out. The simplest way was to create a blank code.</sidenote>
 2. Load an image and extract the data from it, using the coordinates from 1.
 3. For each of the bit masks:
    * Decode the data from the image, insert the desired URL, and correct any disallowed or undesirable bits.
    * Recode the data and calculate the correct EC bits
    * Insert data and EC into the image and display it
 4. Choose which of the masks is best
